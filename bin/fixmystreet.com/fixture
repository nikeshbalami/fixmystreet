#!/usr/bin/env perl
#
# This script will create a test body and its categories, covering the area
# provided, and users associated with that body, which should help testing
# of report interactions.

use strict;
use warnings;
use v5.14;

BEGIN {
    use File::Basename qw(dirname);
    use File::Spec;
    my $d = dirname(File::Spec->rel2abs($0));
    require "$d/../../setenv.pl";
}

use List::Util qw(shuffle);
use Path::Tiny;
use FixMyStreet;
use FixMyStreet::Cobrand;
use FixMyStreet::DB::Factories;
use FixMyStreet::App::Model::PhotoSet;
use DateTime::Format::Pg;
use Getopt::Long::Descriptive;

my ($opt, $usage) = describe_options(
    '%c %o',
    [ 'area-id=i', "MapIt area ID to create body for", { required => 1 } ],
    [ 'name:s', "Name of body to use (defaults to MapIt area name)" ],
    [ 'empty', "Empty all tables of the database first" ],
    [ 'commit', "Actually commit changes to the database" ],
    [ 'coords=s', "Co-ordinates to use instead of example postcode" ],
    [ 'help', "print usage message and exit", { shortcircuit => 1 } ],
);
print($usage->text), exit if $opt->help;

my $db = FixMyStreet::DB->schema->storage;
$db->txn_begin;
END {
    if ($db) {
        $opt->commit ? $db->txn_commit : $db->txn_rollback;
    }
}
if (!$opt->commit) {
    say "NOT COMMITTING TO DATABASE";
}

if ($opt->empty) {
    $db->dbh->do(q{
DO
$func$
BEGIN
    EXECUTE
    (SELECT 'TRUNCATE TABLE ' || string_agg(quote_ident(tablename), ', ') || ' RESTART IDENTITY CASCADE '
        FROM pg_tables WHERE schemaname='public');
END
$func$;
}) or die $!;
    $db->dbh->do( scalar FixMyStreet->path_to('db/fixture.sql')->slurp ) or die $!;
    $db->dbh->do( scalar FixMyStreet->path_to('db/generate_secret.sql')->slurp ) or die $!;
    say "Emptied database";
}

# Body + categories
my $categories = ['Potholes', 'Street lighting', 'Graffiti', 'Other'];
my $body = FixMyStreet::DB::Factory::Body->find_or_create({
    area_id => $opt->area_id,
    categories => $categories,
    $opt->name ? (name => $opt->name) : (),
});
say "Created body " . $body->name . " for MapIt area ID " . $opt->area_id . ', categories ' . join(', ', @$categories);

FixMyStreet::DB::Factory::ResponseTemplate->create({
    body => $body, title => 'Generic',
    text => 'Thank you for your report, we will be in touch with an update soon.' });
FixMyStreet::DB::Factory::ResponseTemplate->create({
    body => $body, title => 'Fixed', state => 'fixed - council',
    text => 'Thank you for reporting that issue, it has now been resolved.' });
FixMyStreet::DB::Factory::ResponseTemplate->create({
    body => $body, title => 'Monitoring', state => 'unable to fix',
    text => 'Thank you for your enquiry. I have visited the site and assessed the problem that you have identified. Unfortunately it doesn’t meet our current intervention criteria so I cannot arrange a repair. We will continue to monitor this during our routine inspections.' });
FixMyStreet::DB::Factory::ResponseTemplate->create({
    body => $body, title => 'Taxed in date', state => 'unable to fix',
    text => 'We have investigated this report and found the vehicle to be taxed therefore no further action will be taken.  Please note that from October 2014 it is no longer a legal requirement to display a tax disc.' });
my $template = FixMyStreet::DB::Factory::ResponseTemplate->create({
    body => $body, title => 'Not responsible', state => 'not responsible',
    text => 'This report is not the responsibility of the council and will be passed to the relevant organisation.' });
$template->add_to_contacts($body->contacts->first);
my $priority = FixMyStreet::DB::Factory::ResponsePriority->create({ body => $body, description => '4 hour fix' });
FixMyStreet::DB::Factory::ResponsePriority->create({ body => $body, description => '28 day fix' });
FixMyStreet::DB::Factory::ResponsePriority->create({ body => $body, description => 'For information only' });
$priority->add_to_contacts($body->contacts->first);

# Users
say "Created users, all with password 'password':";
my %users;
my $perms_inspector = ['report_inspect', 'planned_reports'];
my $perms_cs = [
    'contribute_as_body', 'contribute_as_another_user',
    'moderate', 'view_body_contribute_details',
];
foreach (
    { name => 'Inspector Gadget', email => 'inspector@example.org', email_verified => 1, body => $body, permissions => $perms_inspector },
    { name => 'Harriet Helpful', email_verified => 1, email => 'cs@example.org', body => $body, permissions => $perms_cs },
    { name => 'Super User', email_verified => 1, email => 'super@example.org', body => $body, permissions => [
        @$perms_cs, @$perms_inspector, 'report_edit',
        'category_edit', 'template_edit', 'responsepriority_edit',
        'user_assign_body', 'user_manage_permissions', 'user_edit',
    ] },
    { name => 'Wizard of Oz', email_verified => 1, email => 'admin@example.org', is_superuser => 't' },
    { name => "Norma User", email_verified => 1, email => 'user@example.org' },
) {
    $users{$_->{email}} = FixMyStreet::DB::Factory::User->find_or_create($_);
    my $perms = $_->{permissions} ? " (" . join(', ', @{$_->{permissions} || []}) . ")" : "";
    my $su = $_->{is_superuser} ? " (superuser)" : "";
    say "* $_->{email}$perms$su";
}

# Problems

my %titles = (
    'Potholes' => ['Deep pothole', 'Small pothole', 'Pothole in cycle lane', 'Pothole on busy pavement', 'Large pothole', 'Sinking manhole'],
    'Street lighting' => ['Faulty light', 'Street light not working', 'Lights out in tunnel', 'Light not coming on', 'Light not going off'],
    'Graffiti' => ['Graffiti', 'Graffiti', 'Offensive graffiti', 'Graffiti on the bridge', 'Remove graffiti'],
    'Other' => ['Loose drain cover', 'Flytipping on country lane', 'Vehicle blocking footpath', 'Hedge encroaching pavement', 'Full litter bins'],
);
my %photos = (
    'Potholes' => [ '33717571655_46dfc6f65f_z.jpg', '37855543925_9dbbbecf41_z.jpg', '19119222668_a3c866d7c8_z.jpg', '12049724866_404b066875_z.jpg', '3705226606_eac71cf195_z.jpg', '6304445383_bd216ca892_z.jpg' ],
    'Street lighting' => ['38110448864_fd71227247_z.jpg', '27050321819_ac123400eb_z.jpg', '35732107202_b790c61f63_z.jpg', '31889115854_01cdf38b0d_z.jpg', undef ],
    'Graffiti' => ['12205918375_f37f0b27a9_z.jpg', '8895442578_376a9b0be0_z.jpg', '22998854352_17555b7536_z.jpg', '22593395257_3d48f23bfa_z.jpg', '20515339175_f4ed9fc1d9_z.jpg' ],
    'Other' => ['14347396807_20737504f7_z.jpg', '14792525771_167bc20e3d_z.jpg', undef, '36296226976_a83a118ff8_z.jpg', '23222004240_273977b2b2_z.jpg'],
);
my %descriptions = (
    'Potholes' => [
        '6” deep pothole in the very centre of the Bristol road; cars are swerving to avoid it. Please treat this as a matter of urgency.',
        'It’s small but it’s a trip hazard. Right where people cross over to get into the school or church. About 3” across but will become larger if not attended to.',
        'Just went over my handlebars as I didn’t see this pothole on Banbury road, just before the traffic lights. Dread to think what might have happened if the traffic had been busier.',
        'I work in the cafe at 34 Clarington Avenue and we’ve had four people come in having tripped over in the last seven days. The pothole’s right outside the key-cutting shop, just near the alleyway.',
        'This has been here, next to the side of the road, for a month',
        'A manhole on the junction of Etherington Road is sinking into the road surface. Not only is it an accident waiting to happen but it’s making a terrible noise every time a car passes over it.',
    ],
    'Street lighting' => [
        'I saw a workman attempting to fix this streetlight over a week ago, and ever since then it’s come on in the daytime and gone off as soon as it gets dark. Come and sort it out please!',
        'Every Tuesday night I have to walk across the carpark outside the station at around 9pm. Not a problem in summer but now the nights are drawing in I feel very unsafe. Please get the streetlight by the exit fixed as I’m sure I can’t be the only woman feeling vulnerable.',
        'My toddler is too scared to go in now, as soon as you’re more than a few paces in it’s absolutely pitch black with no hope of seeing any puddles or worse on the floor. I think this needs seeing to as a priority. Thank you.',
        'I think the lights in the multi storey carpark are motion sensitive but I’ve actually never seen them come on. Maybe the bulb needs replacing??',
        'This streetlight is right outside my bedroom window. It is on 24 hours a day, even in blazing sunlight. Apart from the fact that it’s a waste of electricity, it makes my bedroom feel like an interrogation chamber. Please come and fix it.',
    ],
    'Graffiti' => [
        'Someone has scrawled a really offensive piece of graffiti (are they called ‘tags’??) on the side of the town hall. You might want to see about getting it cleaned off. Wouldn’t want my own children to see that, I’m sure others feel the same.',
        'Can’t see the timetable at the bus shelter cos some idiot’s covered it all in red spray paint. Honestly. Kids of today.',
        'Not gonna write down what it depicts cos I suspect that’d get caught in your profanity filter lol. But please do come and paint over this monstrosity before it causes an accident.',
        'That same guy that’s graffitied all over town has gone and done the same on the passenger bridge over the tracks, you can see it as you come into the station. Ugly bit of garbage graffiti. Bit of a poor first impression for the town eh.',
        'What’s the procedure for requesting a bit of graffiti be removed? There’s been a huge scrawl on the wall outside the club for months. Nice sentiment maybe but really brings the tone of the area down.',
    ],
    'Other' => [
        'Surprised me so much when I crossed the road I nearly took a tumble! Glad I didn’t fall in, this really needs securing now.',
        'Some unmentionable has driven down Larker’s Lane and left a huge heap of old rubbish on the verge. Talk about ruining the view! Such a beautiful spot and these lowlifes come and dump their junk. Probably trying to avoid paying the tip.',
        'Well someone on foot can just about squeeze through but good luck if you’ve got a pushchair or god forbid a wheelchair. Think someone’s abandoned this car; it hasn’t moved in weeks.',
        'Awful trying to walk past after a rain shower, well any time really.',
        'I think these need seeing to more frequently, they’re always full to overflowing by midday.',
    ],
);

my ($location, $lat, $lon);
if ($opt->coords) {
    $location = $opt->coords;
    ($lat, $lon) = split ',', $location;
} else {
    my $postcode = mySociety::MaPit::call('area/example_postcode', $opt->area_id);
    $postcode = mySociety::MaPit::call('postcode', $postcode);
    ($location, $lat, $lon) = map { $postcode->{$_} } qw/postcode wgs84_lat wgs84_lon/;
}

my $cobrand = 'default';
foreach (FixMyStreet::Cobrand->available_cobrand_classes) {
    my $sub = $_->{class} && $_->{class}->can('council_area_id');
    if ($sub && &$sub == $opt->area_id) {
        $cobrand = $_->{class}->moniker;
        last;
    }
}

my $user = $users{'user@example.org'};
my $num = 20;
say "Created $num problems around '$location' in cobrand '$cobrand'";
my $inaccurate_km = 0.01;
my $confirmed = DateTime->today->subtract(days => 1)->add(hours => 8);
my $problems = [];
for (1..$num) {
    $confirmed->add(seconds => rand(7000));
    my $category = $categories->[int(rand(@$categories))];
    my $titles = $titles{$category};
    my $descs = $descriptions{$category};
    my $rand = int(rand(@$titles));

    my $photo;
    if (my $file = $photos{$category}->[$rand]) {
        my $files = [ $file ];
        if ($category eq 'Graffiti') {
            push @$files, $photos{$category}->[int(rand(@$titles))];
        }
        $files = [ map { path(FixMyStreet->path_to("t/images/$_"))->slurp_raw } @$files ];
        my $photoset = FixMyStreet::App::Model::PhotoSet->new({
            data_items => $files,
        });
        $photo = $photoset->data;
    }

    push @$problems, FixMyStreet::DB::Factory::Problem->create({
        body => $body,
        areas => ',' . $opt->area_id . ',',
        user => $user,
        postcode => $location,
        latitude => $lat + rand(2 * $inaccurate_km) - $inaccurate_km,
        longitude => $lon + rand(3 * $inaccurate_km) - 1.5 * $inaccurate_km,
        category => $category,
        cobrand => $cobrand,
        title => $titles->[$rand],
        detail => $descs->[$rand],
        photo_id => $photo,
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
}

for (1..3) {
    my $p = $problems->[int(rand(@$problems))];
    $users{'inspector@example.org'}->add_to_planned_reports($p);
}

# Flow comments
my @fixed_user = (
    'Brilliant! Seen to within two days and no more problems, thanks.',
    'Thank you for getting this sorted out so quickly.',
    'Walked past last Tuesday and it seems to have been fixed, hooray.',
    'Well it took a few emails back and forth to understand the exact location etc but pleased to say it’s all ok now.',
    'Yep, all good.',
    'The council deserve every penny of their salaries, honestly can’t give them higher praise for the way they’ve handled this issue. Bravo.',
    'All seems ok now, fingers crossed.',
    'Bish bash bosh. Sorted. Thanks so much.',
);

my @problems = shuffle(@$problems);

for (1..3) {
    my $problem = $problems[$_];
    $confirmed->add(seconds => rand(10000));
    FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        user => $users{'cs@example.org'},
        text => 'Could you please provide a better picture so we can locate this issue more easily.',
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
    $confirmed->add(seconds => rand(10000));
    FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        user => $user,
        text => 'Here you go!',
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
    $confirmed->add(seconds => rand(10000));
    FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        problem_state => 'investigating',
        user => $users{'cs@example.org'},
        text => 'Thanks, we are now looking into this.',
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
    $confirmed->add(seconds => rand(10000));
    FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        problem_state => 'action scheduled',
        user => $users{'inspector@example.org'},
        text => 'Confirmed and scheduled for fixing.',
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
    $confirmed->add(seconds => rand(10000));
    FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        problem_state => 'fixed - council',
        user => $users{'inspector@example.org'},
        text => 'Fixed',
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
    $problem->update({ state => 'fixed - council' });
    $confirmed->add(seconds => rand(10000));
    FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        user => $user,
        text => $fixed_user[int(rand(@fixed_user))],
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
}

# Some 'still open' updates
my @open_user = (
    'I’m afraid this problem is recurrent. Could it be prioritised please?',
    'Ongoing issue.',
    'Council rang to say they’re aware and it’s on their list.',
    'Still awaiting news on this one.',
    'Council let me know it’s not a top priority, which TBH I  do understand now they’ve talked it through.',
);

my $updates = [];
for (5..9) {
    $confirmed->add(seconds => rand(10000));
    push @$updates, FixMyStreet::DB::Factory::Comment->create({
        problem => $problems[$_],
        user => $user,
        text => $open_user[int(rand(@open_user))],
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
}

# Some not responsible updates
for (11..13) {
    my $problem = $problems[$_];
    $confirmed->add(seconds => rand(10000));
    push @$updates, FixMyStreet::DB::Factory::Comment->create({
        problem => $problem,
        problem_state => 'not responsible',
        user => $users{'cs@example.org'},,
        text => 'This issue is outside our responsibility.',
        confirmed => DateTime::Format::Pg->format_datetime($confirmed),
    });
    $problem->update({ state => 'not responsible' });
}
say "Created updates on problems " . join(', ', map { $_->problem_id } @$updates);
